source("mixing_score_functions.R")
sim_uniform <- function(i) {
x = seq(1, i, 2)
a <- list(x = x, y = rep(x = 1, length(x)))
x = x + 1
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
sim_uniform()
ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_random <- function(i, j) {
x = sample(x = seq(1, 100),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, 100),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_random(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_random <- function(i, j) {
x = sample(x = seq(1, 100),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, 100),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_random(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_partial <- function(i = 50, j = 20, k = 100, l = 50) {
x = sample(x = seq(1, k),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, l),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_partial()
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_no <- function(i, j) {
x = sample(x = seq(1, 35),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(65, 101),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_no(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y", xlim = c(1, 101))
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
set.seed(1)
ab <- sim_no(21, 50)
set.seed(2)
cd <- sim_random(100, 50)
set.seed(3)
ef <- sim_partial()
# ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
c <- cd[["a"]]
d <- cd[["b"]]
e <- ef[["a"]]
f <- ef[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y", xlim = c(1, 101), ylim = c(0, 10))
lines(x = a$x, y = a$y + 5, col="red", type = "p")
lines(x = b$x, y = b$y + 4, col="blue", type = "p")
lines(x = c$x, y = c$y + 3, col="green", type = "p", pch = 4)
lines(x = d$x, y = d$y + 2, col="violet", type = "p", pch = 4)
lines(x = e$x, y = e$y + 1, col="cyan", type = "p", pch = 5)
lines(x = f$x, y = f$y, col="orange", type = "p", pch = 5)
legend("bottomright", lwd = 3, legend = c("a", "b", "c", "d", "e", "f"), col = c("red", "blue", "green", "violet", "cyan", "orange"))
a <- as.data.frame(x = c(a, clone = "a"))
b <- as.data.frame(x = c(b, clone = "b"))
c <- as.data.frame(x = c(c, clone = "c"))
d <- as.data.frame(x = c(d, clone = "d"))
e <- as.data.frame(x = c(e, clone = "e"))
f <- as.data.frame(x = c(f, clone = "f"))
clone_df <- rbind(a, b, c, d, e, f)
embedding <- clone_df[,dims]
ms_simulation <- MixingScoreClones(
embedding,
k_frac = 0.3,
clone_df,
cores = 1,
clone_id = "clone"
)
a <- as.data.frame(x = c(a, clone = "a"))
b <- as.data.frame(x = c(b, clone = "b"))
c <- as.data.frame(x = c(c, clone = "c"))
d <- as.data.frame(x = c(d, clone = "d"))
e <- as.data.frame(x = c(e, clone = "e"))
f <- as.data.frame(x = c(f, clone = "f"))
clone_df <- rbind(a, b, c, d, e, f)
embedding <- clone_df[,dims]
dims
a <- as.data.frame(x = c(a, clone = "a"))
b <- as.data.frame(x = c(b, clone = "b"))
c <- as.data.frame(x = c(c, clone = "c"))
d <- as.data.frame(x = c(d, clone = "d"))
e <- as.data.frame(x = c(e, clone = "e"))
f <- as.data.frame(x = c(f, clone = "f"))
clone_df <- rbind(a, b, c, d, e, f)
embedding <- clone_df[,dims]
ms_simulation <- MixingScoreClones(
embedding,
k_frac = 0.3,
clone_df,
cores = 1,
clone_id = "clone"
)
# embedding <- clone_df[,dims]
clone_df <- clone_df["clone"]
ms_simulation <- MixingScoreClones(
embedding,
k_frac = 0.3,
clone_df,
cores = 1,
clone_id = "clone"
)
source("mixing_score_functions.R")
sim_uniform <- function(i) {
x = seq(1, i, 2)
a <- list(x = x, y = rep(x = 1, length(x)))
x = x + 1
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_random <- function(i, j) {
x = sample(x = seq(1, 100),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, 100),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_random(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_partial <- function(i = 50, j = 20, k = 100, l = 50) {
x = sample(x = seq(1, k),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, l),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_partial()
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_no <- function(i, j) {
x = sample(x = seq(1, 35),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(65, 101),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_no(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y", xlim = c(1, 101))
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
set.seed(1)
ab <- sim_no(21, 50)
set.seed(2)
cd <- sim_random(100, 50)
set.seed(3)
ef <- sim_partial()
# ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
c <- cd[["a"]]
d <- cd[["b"]]
e <- ef[["a"]]
f <- ef[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y", xlim = c(1, 101), ylim = c(0, 10))
lines(x = a$x, y = a$y + 5, col="red", type = "p")
lines(x = b$x, y = b$y + 4, col="blue", type = "p")
lines(x = c$x, y = c$y + 3, col="green", type = "p", pch = 4)
lines(x = d$x, y = d$y + 2, col="violet", type = "p", pch = 4)
lines(x = e$x, y = e$y + 1, col="cyan", type = "p", pch = 5)
lines(x = f$x, y = f$y, col="orange", type = "p", pch = 5)
legend("bottomright", lwd = 3, legend = c("a", "b", "c", "d", "e", "f"), col = c("red", "blue", "green", "violet", "cyan", "orange"))
a <- as.data.frame(x = c(a, clone = "a"))
b <- as.data.frame(x = c(b, clone = "b"))
c <- as.data.frame(x = c(c, clone = "c"))
d <- as.data.frame(x = c(d, clone = "d"))
e <- as.data.frame(x = c(e, clone = "e"))
f <- as.data.frame(x = c(f, clone = "f"))
clone_df <- rbind(a, b, c, d, e, f)
# embedding <- clone_df[,dims]
clone_df <- clone_df["clone"]
source("mixing_score_functions.R")
sim_uniform <- function(i) {
x = seq(1, i, 2)
a <- list(x = x, y = rep(x = 1, length(x)))
x = x + 1
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_random <- function(i, j) {
x = sample(x = seq(1, 100),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, 100),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_random(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_partial <- function(i = 50, j = 20, k = 100, l = 50) {
x = sample(x = seq(1, k),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(1, l),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_partial()
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y")
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
sim_no <- function(i, j) {
x = sample(x = seq(1, 35),
size = i,
replace = T)
a <- list(x = x, y = rep(x = 1, length(x)))
x = sample(x = seq(65, 101),
size = j,
replace = T)
b <- list(x = x, y = rep(x = 1, length(x)))
return(list(a = a, b = b))
}
ab <- sim_no(100, 50)
a <- ab[["a"]]
b <- ab[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y", xlim = c(1, 101))
lines(a, col="red", type = "p")
lines(b, col="blue", type = "p", pch = 4)
set.seed(1)
ab <- sim_no(21, 50)
set.seed(2)
cd <- sim_random(100, 50)
set.seed(3)
ef <- sim_partial()
# ab <- sim_uniform(100)
a <- ab[["a"]]
b <- ab[["b"]]
c <- cd[["a"]]
d <- cd[["b"]]
e <- ef[["a"]]
f <- ef[["b"]]
plot(a, type = "n", xlab = "X", ylab = "Y", xlim = c(1, 101), ylim = c(0, 10))
lines(x = a$x, y = a$y + 5, col="red", type = "p")
lines(x = b$x, y = b$y + 4, col="blue", type = "p")
lines(x = c$x, y = c$y + 3, col="green", type = "p", pch = 4)
lines(x = d$x, y = d$y + 2, col="violet", type = "p", pch = 4)
lines(x = e$x, y = e$y + 1, col="cyan", type = "p", pch = 5)
lines(x = f$x, y = f$y, col="orange", type = "p", pch = 5)
legend("bottomright", lwd = 3, legend = c("a", "b", "c", "d", "e", "f"), col = c("red", "blue", "green", "violet", "cyan", "orange"))
a <- as.data.frame(x = c(a, clone = "a"))
b <- as.data.frame(x = c(b, clone = "b"))
c <- as.data.frame(x = c(c, clone = "c"))
d <- as.data.frame(x = c(d, clone = "d"))
e <- as.data.frame(x = c(e, clone = "e"))
f <- as.data.frame(x = c(f, clone = "f"))
clone_df <- rbind(a, b, c, d, e, f)
embedding <- clone_df[,dims]
setwd("~/Projects/revised-waddington-abm")
readxl
install.packages('readxl')
install.packages('readxl')
library(readxl)
readxl
setwd("~/Projects/revised-waddington-abm/src")
readxl("../data/JS178_179_curated_by_Shalin.xlsx")
df <- readxl("../data/JS178_179_curated_by_Shalin.xlsx")
df <- read_excel("../data/JS178_179_curated_by_Shalin.xlsx")
df
View(df)
df <- read_excel("../data/JS178_179_curated_by_Shalin.xlsx", fillmergedcells = T)
?read_excel
library(openxlsx)
install.packages('openxlsx')
library(openxlsx)
install.packages('openxlsx')
df <- read_excel("../data/JS178_179_curated_by_Shalin.xlsx", fillmergedcells = T)
View(df)
df <- read_excel("../data/JS178_179_curated_by_Shalin.xlsx", fillmergedcells = T)
library(readxl)
df <- read_excel("../data/JS178_179_curated_by_Shalin.xlsx", fillmergedcells = T)
df <- read_excel("../data/JS178_179_curated_by_Shalin.xlsx")
View(df)
